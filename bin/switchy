#!/usr/bin/env ruby

$: << File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

def usage
  u = <<USAGE
switchy - turn external lights on/off
switchy <light> <0|1> [<light2> <0|1> [...]]

light:
  0 - Onboard LED (reversed: 0 = on, 1 = off)
  1-4 External Switches (1 = on)

example: Turn off onboard LED, turn on lights 2 and 4, turn off light 3, leave light 1 alone:
switchy 0 1 2 1 4 1 3 0
USAGE
end

require 'switchy'

args = ARGV.dup

s = Switchy.new
# The serial port is a bit tetchy. Give it a few cycles to settle.
sleep 0.05


# lights by number => pair of pins, one to set high, the other low
# TODO: change these into on/off arrays so we can set multiple lights with a single command
# TODO: consider dropping this altogether and doing "switchy C4 1 C5 0" etc?
lights = {
  0 => [nil, Switchy::PINS::D6 ],
  1 => [Switchy::PINS::C4, Switchy::PINS::C5 ],
  2 => [Switchy::PINS::C6, Switchy::PINS::C7 ],
  3 => [Switchy::PINS::B7, Switchy::PINS::B6 ],
  4 => [Switchy::PINS::B5, Switchy::PINS::B4 ],
  5 => [Switchy::PINS::B3, Switchy::PINS::B2 ],
  6 => [Switchy::PINS::D7, Switchy::PINS::B0 ],
  7 => [Switchy::PINS::D5, Switchy::PINS::D6 ],
  8 => [Switchy::PINS::D3, Switchy::PINS::D4 ],
  9 => [Switchy::PINS::D1, Switchy::PINS::D2 ],
  10 => [Switchy::PINS::C2, Switchy::PINS::D0 ],
}

until args.empty?
  light = args.shift.to_i
  command = args.shift.to_i

  unless light >= 0 && light <= 10
    puts usage
    raise "ERROR: ARGV[1] must be between 0 and 10"
  end

  unless command >= 0 && command <= 1
    puts usage
    raise "ERROR: ARGV[2] must be one of on/off/status"
  end

  raise "ERROR: status not yet implemented" if command == 'status'

  s.set_pin(lights[light][0], command) if lights[light][0]
  s.set_pin(lights[light][1], 1-command) if lights[light][1]
end


